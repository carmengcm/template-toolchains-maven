- name: MakeRelease
  inputs:
  - type: git
    branch: master
    dir_name: null
    service: ${SAMPLE_REPO}
  properties:
  - name: versionToBeDeployed
    value: 1.0.1
    type: text
  - name: tagToBeDeployed
    value: 1.0.1-25
    type: text
  - name: userEmailGit
    value: cesar.rodriguez.medina@ibm.com
    type: text
  - name: userNameGit
    value: CÃ©sar Rodriguez Medina
    type: text
  jobs:
  - name: Build - 2MasterBranch
    type: builder
    deploy_permission: DEV_IN_SPACE
    extension_id: ibm.devops.services.pipeline.maven.build.deploy
    SERVICE_INSTANCE: (default)
    SONAR_SERVICE_INSTANCE: (default)
    BUILD_COMMAND: "#!/bin/bash\nset -x\n# environment variables are available:\n\
      # MAVEN_NAME: name of the service instance\n# MAVEN_USER_ID: userid for the\
      \ maven repository\n# MAVEN_TOKEN: the token or password for the maven repository\n\
      # MAVEN_SNAPSHOT_URL: the maven snapshot repository\n# MAVEN_RELEASE_URL: the\
      \ maven release repository\n# MAVEN_MIRROR_URL: the maven mirror repository\n\
      # SONAR_INSTANCE_NAME: the name of the SonarQube instance\n# SONAR_SERVER_URL:\
      \ the url of the SonarQube server\n# SONAR_USER_ID: SonarQube user name\n# SONAR_USER_TOKEN:\
      \ SonarQube password or authentication token\n# The settings.xml is available\
      \ in $HOME/.m2/settings.xml\n# The name of the snapshots repository is 'snapshots'\n\
      # The name of the release repository is 'releases'\n# The name of the mirror\
      \ repository is 'central'\n\n#git pull origin master\ngit config user.email\
      \ \"${userEmailGit}\"\ngit config user.name \"${userNameGit}\"\necho \"Fetching\
      \ tags from repo\"\ngit fetch --tags origin\necho \"Merge from tag ${tagToBeDeployed}\"\
      \ngit reset --hard\ngit merge --ff ${tagToBeDeployed} -m \"Merge from tag ${tagToBeDeployed}\"\
      \n\nmvn -q clean surefire:test\n#mvn sonar:sonar\n\necho \"change version of\
      \ pom to ${versionToBeDeployed}\"\nmvn clean versions:set -q -DnewVersion=${versionToBeDeployed}\
      \ -DskipTests\n\nmvn -q -B clean package -DskipTests \n#mvn -DaltDeploymentRepository=releaseRepository::default::${MAVEN_RELEASE_URL}\
      \ deploy\n\n\ngit add ./pom.xml\n###### Delete line below when nexus integrated\n\
      git add ./target\\/*.jar\ngit commit -m \"Change pom version to ${versionToBeDeployed}\
      \ as desirable release\"\ngit tag \"${versionToBeDeployed}-${BUILD_NUMBER}\"\
      \ngit push origin master\n\n\n# Prepare release\n#\n#"
    SERVICE_INSTANCE_TYPE: nexus
  - name: Build - 2NexusRegistry
    type: builder
    artifact_dir: ''
    build_type: cr
    script: |
      #!/bin/bash
      echo -e "Build environment variables:"
      echo "REGISTRY_URL=${REGISTRY_URL}"
      echo "REGISTRY_NAMESPACE=${REGISTRY_NAMESPACE}"
      echo "IMAGE_NAME=${IMAGE_NAME}"
      echo "BUILD_NUMBER=${BUILD_NUMBER}"

      # Learn more about the available environment variables at:
      # https://console.bluemix.net/docs/services/ContinuousDelivery/pipeline_deploy_var.html#deliverypipeline_environment

      # To review or change build options use:
      # bx cr build --help

      ###### Add and fix line below when nexus integrated
      # wget --user=username --password=password "http://<ip>:<port>/nexus/service/local/artifact/maven/content?g=<group>&a=<artifact>&v=<version>&r=snapshots"
      echo "Dockerfile not found. Creating it......"
      DOCKERFILE_FILE="Dockerfile"
      Dockerfile=$(cat <<EOF''
      FROM openjdk:8-jdk-alpine
      ADD ./target/gs-rest-service-$versionToBeDeployed.jar app.jar
      EXPOSE 8080
      ENTRYPOINT ["java","-Djava.security.egd=file:/dev/./urandom","-jar","/app.jar"]
      EOF
      )


      echo "Replacing variables..."
      echo "$Dockerfile" > $DOCKERFILE_FILE
      sed -i 's/$versionToBeDeployed/'"$versionToBeDeployed"'/g' $DOCKERFILE_FILE


      echo "cat $DOCKERFILE_FILE"
      cat $DOCKERFILE_FILE

      echo -e "Building container image"
      set -x
      bx cr build -t $REGISTRY_URL/$REGISTRY_NAMESPACE/$IMAGE_NAME:${versionToBeDeployed}_${BUILD_NUMBER} .
      set +x
    namespace: sanalmccc
    image_name: gs-rest-service
    target:
      region_id: ibm:yp:eu-de
      api_key_id: ApiKey-9521f136-f8fe-4002-81f1-c22ca4626ff8
  - name: Test - Image Vulnerability
    type: tester
    script: |-
      #!/bin/bash
      PIPELINE_IMAGE_URL=$REGISTRY_URL/$REGISTRY_NAMESPACE/$IMAGE_NAME:${versionToBeDeployed}_${BUILD_NUMBER}
      echo -e "Checking vulnerabilities in image: ${PIPELINE_IMAGE_URL}"
      for ITERATION in {1..30}
      do
        set +e
        OUTPUT=$( bx cr va ${PIPELINE_IMAGE_URL} )
        set -e
        if ! [[ ${OUTPUT} == *No\ vulnerability\ scan* || ${OUTPUT} == *not\ yet\ completed* ]]; then
          break
        fi
        echo -e "${ITERATION} : A vulnerability report was not found for the specified image."
        echo "Either the image doesn't exist or the scan hasn't completed yet. "
        echo "Waiting for scan to complete.."
        sleep 10
      done
      set +e
      bx cr va ${PIPELINE_IMAGE_URL}
      set -e
      [[ $(bx cr va ${PIPELINE_IMAGE_URL}) == *SAFE\ to\ deploy* ]] || { echo "ERROR: The vulnerability scan was not successful, check the OUTPUT of the command and try again."; exit 1; }
    test_type: vulnerabilityadvisor
    namespace: sanalmccc
    image_name: gs-rest-service
    image_tag: latest
    target:
      region_id: ibm:yp:eu-de
      api_key_id: ApiKey-9521f136-f8fe-4002-81f1-c22ca4626ff8
