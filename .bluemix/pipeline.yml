---
stages:
- name: CI-BUILD
  inputs:
    type: git
    branch: develop
    service: ${SAMPLE_REPO}
  triggers:
  - type: commit
  jobs:
  - name: Build
    type: builder
    deploy_permission: DEV_IN_SPACE
    extension_id: ibm.devops.services.pipeline.maven.build.deploy
    SERVICE_INSTANCE: (default)
    SONAR_SERVICE_INSTANCE: (default)
    BUILD_COMMAND: "#!/bin/bash\n# environment variables are available:\n# MAVEN_NAME:\
      \ name of the service instance\n# MAVEN_USER_ID: userid for the maven repository\n\
      # MAVEN_TOKEN: the token or password for the maven repository\n# MAVEN_SNAPSHOT_URL:\
      \ the maven snapshot repository\n# MAVEN_RELEASE_URL: the maven release repository\n\
      # MAVEN_MIRROR_URL: the maven mirror repository\n# SONAR_INSTANCE_NAME: the\
      \ name of the SonarQube instance\n# SONAR_SERVER_URL: the url of the SonarQube\
      \ server\n# SONAR_USER_ID: SonarQube user name\n# SONAR_USER_TOKEN: SonarQube\
      \ password or authentication token\n# The settings.xml is available in $HOME/.m2/settings.xml\n\
      # The name of the snapshots repository is 'snapshots'\n# The name of the release\
      \ repository is 'releases'\n# The name of the mirror repository is 'central'\n\
      \nmvn -q clean surefire:test\n#mvn sonar:sonar\nmvn -B -q clean package -DskipTests\
      \ \n\n#mvn -DaltDeploymentRepository=snapshots::default::${MAVEN_SNAPSHOT_URL}\
      \ deploy\n\n#Extract project version\necho 'Extract project version '\n# Future:\
      \ Review how to do with mvn help:evaluate\n#projectVersion=$(mvn help:evaluate\
      \ -Dexpression=project.version | grep -e '^[^\\[]')\nprojectVersion=$(cat pom.xml\
      \ | grep \"^    <version>.*</version>$\" | awk -F'[><]' '{print $3}')\necho\
      \ \"Extracted project version: ${projectVersion}\"\n#Create a tag from project\
      \ version and build number\n\ntagName=${projectVersion}-${BUILD_NUMBER}\necho\
      \ \"Create a tag from project version and build number: ${tagName}\"\ngit tag\
      \ \"${tagName}\"\n# push tag \ngit push origin develop --tags\n\necho 'Created\
      \ tag: ' ${tagName}"
    SERVICE_INSTANCE_TYPE: nexus
- name: Dev - Deploy
  inputs:
  - type: job
    stage: CI-BUILD
    job: Build
  triggers:
  - type: stage
  properties:
  - name: PIPELINE_IMAGE_URL
    value: gs-rest-service
    type: text
  jobs:
  - name: Test - WhiteBox
    type: tester
    fail_stage: false
    deploy_permission: DEV_IN_SPACE
    extension_id: ibm.devops.services.pipeline.appscan.static.builder
    target:
      region_id: ibm:yp:us-south
      organization: cesar.rodriguez.medina@ibm.com
      space: AICSpain
    WAIT_TIME: '5'
    SETUP_SERVICE_SPACE: 'true'
  - name: Build - Image2Registry
    type: builder
    artifact_dir: ''
    build_type: cr
    script: "#!/bin/bash\necho -e \"Build environment variables:\"\necho \"REGISTRY_URL=${REGISTRY_URL}\"\
      \necho \"REGISTRY_NAMESPACE=${REGISTRY_NAMESPACE}\"\necho \"IMAGE_NAME=${IMAGE_NAME}\"\
      \necho \"BUILD_NUMBER=${BUILD_NUMBER}\"\n\n# Learn more about the available\
      \ environment variables at:\n# https://console.bluemix.net/docs/services/ContinuousDelivery/pipeline_deploy_var.html#deliverypipeline_environment\n\
      \n# To review or change build options use:\n# bx cr build --help\n\nls -la target/*.jar\n\
      jarToDeploy=$(ls target/*.jar)\necho -e \"Checking for Dockerfile at the repository\
      \ root\"\n#if [ -f Dockerfile ]; then \n#   echo \"Dockerfile found\"\n#else\n\
      echo \"Dockerfile not found. Creating it......\"\nDOCKERFILE_FILE=\"Dockerfile\"\
      \nDockerfile=$(cat <<EOF''\nFROM openjdk:8-jdk-alpine\nADD $jarToDeploy app.jar\n\
      EXPOSE 8080\nENTRYPOINT [\"java\",\"-Djava.security.egd=file:/dev/./urandom\"\
      ,\"-jar\",\"/app.jar\"]\nEOF\n)\n#fi\n\n# Replace the variables\necho \"$Dockerfile\"\
      \ > $DOCKERFILE_FILE\n\nsed -i 's|$jarToDeploy|'\"$jarToDeploy\"'|g' $DOCKERFILE_FILE\n\
      \necho \"cat $DOCKERFILE_FILE\"\ncat $DOCKERFILE_FILE\n\n\necho -e \"Building\
      \ container image\"\nset -x\nbx cr build -t $REGISTRY_URL/$REGISTRY_NAMESPACE/$IMAGE_NAME:$BUILD_NUMBER\
      \ .\nset +x\n"
    namespace: sanalmccc
    image_name: gs-rest-service
    target:
      region_id: ibm:yp:eu-de
      api_key_id: ApiKey-9521f136-f8fe-4002-81f1-c22ca4626ff8
  - name: Test - Image Vulnerability
    type: tester
    script: |-
      #!/bin/bash
      PIPELINE_IMAGE_URL=$REGISTRY_URL/$REGISTRY_NAMESPACE/$IMAGE_NAME:$BUILD_NUMBER #<<<<<<< COMING FROM WHERE????????
      echo -e "Checking vulnerabilities in image: ${PIPELINE_IMAGE_URL}"
      for ITERATION in {1..30}
      do
        set +e
        OUTPUT=$( bx cr va ${PIPELINE_IMAGE_URL} )
        set -e
        if ! [[ ${OUTPUT} == *No\ vulnerability\ scan* || ${OUTPUT} == *not\ yet\ completed* ]]; then
          break
        fi
        echo -e "${ITERATION} : A vulnerability report was not found for the specified image."
        echo "Either the image doesn't exist or the scan hasn't completed yet. "
        echo "Waiting for scan to complete.."
        sleep 10
      done
      set +e
      bx cr va ${PIPELINE_IMAGE_URL}
      set -e
      [[ $(bx cr va ${PIPELINE_IMAGE_URL}) == *SAFE\ to\ deploy* ]] || { echo "ERROR: The vulnerability scan was not successful, check the OUTPUT of the command and try again."; exit 1; }
    test_type: vulnerabilityadvisor
    namespace: sanalmccc
    image_name: gs-rest-service
    image_tag: latest
    target:
      region_id: ibm:yp:eu-de
      api_key_id: ApiKey-9521f136-f8fe-4002-81f1-c22ca4626ff8
  - name: Deploy
    type: deployer
    deploy_permission: DEV_IN_SPACE
    target:
      region_id: ibm:yp:eu-de
      api_key_id: ApiKey-9521f136-f8fe-4002-81f1-c22ca4626ff8
      kubernetes_cluster: Marta
    script: |+
      #!/bin/bash
      set -x

      # Use this script as a starting point to create your own deployment.yml

      # Make sure the cluster is running and get the ip_address
      ip_addr=$(bx cs workers $PIPELINE_KUBERNETES_CLUSTER_NAME | grep normal | awk '{ print $2 }')
      if [ -z $ip_addr ]; then
        echo "$PIPELINE_KUBERNETES_CLUSTER_NAME not created or workers not ready"
        exit 1
      fi

      # Initialize script variables
      NAME="$IDS_PROJECT_NAME"
      IMAGE="$PIPELINE_IMAGE_URL"
      #PORT=$(bx cr image-inspect $IMAGE --format "{{ .ContainerConfig.ExposedPorts }}" | sed -E 's/^[^0-9]*([0-9]+).*$/\1/')
      #if [ -z "$PORT" ]; then
      #    PORT=5000
      #    echo "Port not found in Dockerfile, using $PORT"
      #fi
      PORT=8080
      echo ""
      echo "Deploy environment variables:"
      echo "NAME=$NAME"
      echo "IMAGE=$IMAGE"
      echo "PORT=$PORT"
      echo ""

      DEPLOYMENT_FILE="deployment.yml"
      echo "Creating deployment file $DEPLOYMENT_FILE"

      # Build the deployment file
      DEPLOYMENT=$(cat <<EOF''
      apiVersion: extensions/v1beta1
      kind: Deployment
      metadata:
        name: $NAME
      spec:
        replicas: 1
        template:
          metadata:
            labels:
              app: $NAME
          spec:
            containers:
            - name: $NAME
              image: $IMAGE
              imagePullPolicy: IfNotPresent
              ports:
              - containerPort: $PORT
      ---
      apiVersion: v1
      kind: Service
      metadata:
        name: $NAME
        labels:
          app: $NAME
      spec:
        type: NodePort
        ports:
          - port: $PORT
        selector:
          app: $NAME
      EOF
      )

      # Substitute the variables
      echo "$DEPLOYMENT" > $DEPLOYMENT_FILE
      sed -i 's/$NAME/'"$NAME"'/g' $DEPLOYMENT_FILE
      sed -i 's=$IMAGE='"$IMAGE"'=g' $DEPLOYMENT_FILE
      sed -i 's/$PORT/'"$PORT"'/g' $DEPLOYMENT_FILE

      # Show the file that is about to be executed
      echo ""
      echo "DEPLOYING USING MANIFEST:"
      echo "cat $DEPLOYMENT_FILE"
      cat $DEPLOYMENT_FILE
      echo ""

      # Execute the file
      echo "KUBERNETES COMMAND:"
      echo "kubectl apply -f $DEPLOYMENT_FILE"
      kubectl apply -f $DEPLOYMENT_FILE
      echo ""

      echo ""
      echo "DEPLOYED SERVICE:"
      kubectl describe services $NAME
      echo ""
      echo "DEPLOYED PODS:"
      kubectl describe pods --selector app=$NAME
      echo ""

      # Show the IP address and the PORT of the running app
      port=$(kubectl get services | grep "$NAME " | sed 's/.*:\([0-9]*\).*/\1/g')
      echo "RUNNING APPLICATION:"
      echo "URL=http://$ip_addr"
      echo "PORT=$port"
      echo ""
      echo "$NAME running at: http://$ip_addr:$port"
